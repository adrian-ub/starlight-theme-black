---
import crypto from 'node:crypto'

const id = `moon-mask-${crypto.randomBytes(4).toString('hex')}`

// https://web.dev/building-a-theme-switch-component/
// https://github.com/withastro/starlight/blob/9237581c766f68fbb3ce5f9401ca2046f106c7d5/packages/starlight/components/ThemeSelect.astro
---

<starlight-black-theme-select>
  <button
    aria-label={Astro.locals.t('themeSelect.accessibleLabel')}
    aria-live="polite"
    class="sl-flex"
    title={Astro.locals.t('themeSelect.accessibleLabel')}
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="icon-dark"
    >
      <circle cx="12" cy="12" r="4"></circle>
      <path d="M12 2v2"></path>
      <path d="M12 20v2"></path>
      <path d="m4.93 4.93 1.41 1.41"></path>
      <path d="m17.66 17.66 1.41 1.41"></path>
      <path d="M2 12h2"></path>
      <path d="M20 12h2"></path>
      <path d="m6.34 17.66-1.41 1.41"></path>
      <path d="m19.07 4.93-1.41 1.41"></path>
    </svg>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="icon-light"
    >
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
    </svg>
  </button>
</starlight-black-theme-select>

<style>
  @layer black {
    .icon-light,
    .icon-dark {
      display: none;
      width: 1rem;
      height: 1rem;
    }

    :root[data-theme='light'] .icon-light,
    :root[data-theme='auto'] .icon-light {
      display: inline;
    }
    :root[data-theme='dark'] .icon-dark {
      display: inline;
    }

    button {
      align-items: center;
      background-color: transparent;
      border: none;
      cursor: pointer;
      padding-top: 0.5rem;
      padding-bottom: 0.5rem;
      padding-left: 0;
      padding-right: 0;
      border-radius: calc(0.5rem - 2px);
      display: inline-flex;
      justify-content: center;
      align-items: center;
      width: 2rem;
      height: 2rem;
    }

    button:hover {
      color: var(--accent-foreground);
      background-color: var(--accent);
    }
  }
</style>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
  StarlightThemeProvider.updatePickers()
</script>

<script>
  type Theme = 'auto' | 'dark' | 'light'

  /** Key in `localStorage` to store color theme preference at. */
  const storageKey = 'starlight-theme'

  /** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
  function parseTheme(theme: unknown): Theme {
    return theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto'
  }

  /** Load the user’s preference from `localStorage`. */
  function loadTheme(): Theme {
    return parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey))
  }

  /** Store the user’s preference in `localStorage`. */
  function storeTheme(theme: Theme): void {
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '')
    }
  }

  /** Get the preferred system color scheme. */
  function getPreferredColorScheme(): Theme {
    return matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark'
  }

  /** Update select menu UI, document theme, and local storage state. */
  function onThemeChange(theme: Theme): void {
    StarlightThemeProvider.updatePickers(theme)
    document.documentElement.dataset['theme'] = theme === 'auto' ? getPreferredColorScheme() : theme
    storeTheme(theme)
  }

  // React to changes in system color scheme.
  matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
    if (loadTheme() === 'auto') onThemeChange('auto')
  })

  customElements.define(
    'starlight-black-theme-select',
    class StarlightRapideThemeSelect extends HTMLElement {
      constructor() {
        super()
        onThemeChange(loadTheme())
        const button = this.querySelector('button')
        button?.addEventListener('click', () => {
          const theme = parseTheme(document.documentElement.dataset['theme'])
          const newTheme = theme === 'dark' ? 'light' : theme === 'light' ? 'dark' : 'auto'
          onThemeChange(newTheme)
          button?.setAttribute('aria-label', `${newTheme} theme`)
        })
      }
    },
  )
</script>
